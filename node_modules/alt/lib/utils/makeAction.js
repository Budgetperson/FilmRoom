'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = makeAction;

var _import = require('../symbols/symbols');

var Sym = _interopRequireWildcard(_import);

var _Symbol = require('es-symbol');

var _Symbol2 = _interopRequireWildcard(_Symbol);

var _AltAction = require('../AltAction');

var _AltAction2 = _interopRequireWildcard(_AltAction);

var _uid = require('./AltUtils');

var ACTION_KEY = Sym.ACTION_KEY;
var ACTION_HANDLER = Sym.ACTION_HANDLER;
var ACTIONS_REGISTRY = Sym.ACTIONS_REGISTRY;

function makeAction(alt, namespace, name, implementation, obj) {
  // make sure each Symbol is unique
  var actionId = _uid.uid(alt[ACTIONS_REGISTRY], '' + namespace + '.' + name);
  alt[ACTIONS_REGISTRY][actionId] = 1;
  var actionSymbol = _Symbol2['default']['for']('alt/' + actionId);

  var data = {
    namespace: namespace,
    name: name,
    id: actionId,
    symbol: actionSymbol
  };

  // Wrap the action so we can provide a dispatch method
  var newAction = new _AltAction2['default'](alt, actionSymbol, implementation, obj, data);

  // the action itself
  var action = newAction[ACTION_HANDLER];
  action.defer = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    setTimeout(function () {
      newAction[ACTION_HANDLER].apply(null, args);
    });
  };
  action[ACTION_KEY] = actionSymbol;
  action.data = data;

  // ensure each reference is unique in the namespace
  var container = alt.actions[namespace];
  var id = _uid.uid(container, name);
  container[id] = action;

  return action;
}

module.exports = exports['default'];