'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _EventEmitter = require('eventemitter3');

var _EventEmitter2 = _interopRequireWildcard(_EventEmitter);

var _assign = require('object-assign');

var _assign2 = _interopRequireWildcard(_assign);

var _Symbol = require('es-symbol');

var _Symbol2 = _interopRequireWildcard(_Symbol);

var _import = require('./symbols/symbols');

var Sym = _interopRequireWildcard(_import);

var ALL_LISTENERS = Sym.ALL_LISTENERS;
var LIFECYCLE = Sym.LIFECYCLE;
var LISTENERS = Sym.LISTENERS;
var PUBLIC_METHODS = Sym.PUBLIC_METHODS;
var STATE_CONTAINER = Sym.STATE_CONTAINER;

// event emitter instance
var EE = _Symbol2['default']();

var AltStore = (function () {
  function AltStore(alt, model, state, StoreModel) {
    var _this = this;

    _classCallCheck(this, AltStore);

    this[EE] = new _EventEmitter2['default']();
    this[LIFECYCLE] = {};
    this[STATE_CONTAINER] = state || model;

    this._storeName = model._storeName;
    this.boundListeners = model[ALL_LISTENERS];
    this.StoreModel = StoreModel;
    if (typeof this.StoreModel === 'object') {
      this.StoreModel.state = _assign2['default']({}, StoreModel.state);
    }

    _assign2['default'](this[LIFECYCLE], model[LIFECYCLE]);
    _assign2['default'](this, model[PUBLIC_METHODS]);

    // Register dispatcher
    this.dispatchToken = alt.dispatcher.register(function (payload) {
      if (model[LIFECYCLE].beforeEach) {
        model[LIFECYCLE].beforeEach(payload, _this[STATE_CONTAINER]);
      }

      if (model[LISTENERS][payload.action]) {
        var result = false;

        try {
          result = model[LISTENERS][payload.action](payload.data);
        } catch (e) {
          if (_this[LIFECYCLE].error) {
            _this[LIFECYCLE].error(e, payload, _this[STATE_CONTAINER]);
          } else {
            throw e;
          }
        }

        if (result !== false) {
          _this.emitChange();
        }
      }

      if (model[LIFECYCLE].afterEach) {
        model[LIFECYCLE].afterEach(payload, _this[STATE_CONTAINER]);
      }
    });

    if (this[LIFECYCLE].init) {
      this[LIFECYCLE].init();
    }
  }

  _createClass(AltStore, [{
    key: 'getEventEmitter',
    value: function getEventEmitter() {
      return this[EE];
    }
  }, {
    key: 'emitChange',
    value: function emitChange() {
      this[EE].emit('change', this[STATE_CONTAINER]);
    }
  }, {
    key: 'listen',
    value: function listen(cb) {
      var _this2 = this;

      this[EE].on('change', cb);
      return function () {
        return _this2.unlisten(cb);
      };
    }
  }, {
    key: 'unlisten',
    value: function unlisten(cb) {
      if (this[LIFECYCLE].unlisten) {
        this[LIFECYCLE].unlisten();
      }
      this[EE].removeListener('change', cb);
    }
  }, {
    key: 'getState',
    value: function getState() {
      return this.StoreModel.config.getState.call(this, this[STATE_CONTAINER]);
    }
  }]);

  return AltStore;
})();

exports['default'] = AltStore;
module.exports = exports['default'];